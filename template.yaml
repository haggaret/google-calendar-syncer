AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Lambda function to sync source google calendar(s) to destination calendar

Parameters:
  LambdaName:
    Type: String
    Default: 'GoogleCalendarSyncer'
    Description: Name for the lambda function
  Debug:
    Type: String
    AllowedValues:
      - true
      - false
    Default: "false"
  BucketName:
    Type: String
    Default: ''
    Description: Name of the S3 Bucket used to store config, cache and credentials. Leave blank if using DynamoDB
                 (Bucket name will be prepended with AWS accountID
  TableName:
    Type: String
    Default: ''
    Description: Name of the DynamoDB table used to store config, cache and credentials. Leave blank if using S3
  Schedule:
    Type: String
    Description: "The schedule expression to use, eg. rate(4 hours) or cron(0 12 * * ? *)"
    Default: "rate(1 hour)"

Conditions:
  CreateBucket: !Not [ !Equals [ !Ref BucketName, '' ]]
  CreateTable: !Not [ !Equals [ !Ref TableName, '' ]]

Resources:
  GoogleCalendarSyncer:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Ref LambdaName
      CodeUri: src/
      Handler: google-calendar-syncer.lambda_handler
      Runtime: python3.8
      Description: Lambda function to sync source google calendar(s) to destination calendar
      MemorySize: 128
      Timeout: 300
      Environment:
        Variables:
          DEBUG: !Ref Debug
          S3_BUCKET: !If [CreateBucket, !Join ['-', [!Ref "AWS::AccountId", !Ref BucketName]], !Ref "AWS::NoValue"]
          DYNAMODB_TABLE: !If [CreateTable, !Ref TableName, !Ref "AWS::NoValue"]
      Events:
        PeriodicRun:
          Type: Schedule
          Properties:
            # Run at given schedule
            Schedule: !Ref Schedule
      Policies:
        - Version: "2012-10-17"
          Statement:
              # S3
            -
              Effect: "Allow"
              Action:
                - "s3:*"
              Resource:
                - !Join ['', ['arn:aws:s3:::', !Ref "AWS::AccountId", '-', !Ref BucketName]]
                - !Join ['', ['arn:aws:s3:::', !Ref "AWS::AccountId", '-', !Ref BucketName, '/*']]
            # DynamoDB
            -
              Effect: "Allow"
              Action:
                - "dynamodb:*"
              Resource:
                - !Join ['', ['arn:aws:dynamodb:', !Ref "AWS::Region", ':', !Ref "AWS::AccountId", ':table/', !Ref TableName]]

  S3Bucket:
    Condition: CreateBucket
    DeletionPolicy: Retain
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['', [!Ref "AWS::AccountId", '', !Ref BucketName]]

  DynamodbTable:
    Condition: CreateTable
    DeletionPolicy: Retain
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: "NEW_AND_OLD_IMAGES"
      AttributeDefinitions:
        -
          AttributeName: "key"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "key"
          KeyType: "HASH"
